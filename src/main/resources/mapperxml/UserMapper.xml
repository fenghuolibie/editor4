<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.mapper.UserMapper">
  <resultMap id="BaseResultMap" type="com.example.entity.User">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="user_code" jdbcType="INTEGER" property="userCode" />
    <result column="user_name" jdbcType="VARCHAR" property="userName" />
    <result column="department_id" jdbcType="INTEGER" property="departmentId" />
    <result column="pass_word" jdbcType="VARCHAR" property="passWord" />
    <result column="user_level" jdbcType="VARCHAR" property="userLevel" />
  </resultMap>
  <sql id="Base_Column_List">
    id, user_code, user_name, department_id, pass_word, user_level
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from user
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from user
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.example.entity.User">
    insert into user (id, user_code, user_name, 
      department_id, pass_word, user_level
      )
    values (#{id,jdbcType=INTEGER}, #{userCode,jdbcType=INTEGER}, #{userName,jdbcType=VARCHAR}, 
      #{departmentId,jdbcType=INTEGER}, #{passWord,jdbcType=VARCHAR}, #{userLevel,jdbcType=VARCHAR}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.example.entity.User">
    insert into user
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="userCode != null">
        user_code,
      </if>
      <if test="userName != null">
        user_name,
      </if>
      <if test="departmentId != null">
        department_id,
      </if>
      <if test="passWord != null">
        pass_word,
      </if>
      <if test="userLevel != null">
        user_level,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=INTEGER},
      </if>
      <if test="userCode != null">
        #{userCode,jdbcType=INTEGER},
      </if>
      <if test="userName != null">
        #{userName,jdbcType=VARCHAR},
      </if>
      <if test="departmentId != null">
        #{departmentId,jdbcType=INTEGER},
      </if>
      <if test="passWord != null">
        #{passWord,jdbcType=VARCHAR},
      </if>
      <if test="userLevel != null">
        #{userLevel,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.example.entity.User">
    update user
    <set>
      <if test="userCode != null">
        user_code = #{userCode,jdbcType=INTEGER},
      </if>
      <if test="userName != null">
        user_name = #{userName,jdbcType=VARCHAR},
      </if>
      <if test="departmentId != null">
        department_id = #{departmentId,jdbcType=INTEGER},
      </if>
      <if test="passWord != null">
        pass_word = #{passWord,jdbcType=VARCHAR},
      </if>
      <if test="userLevel != null">
        user_level = #{userLevel,jdbcType=VARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.example.entity.User">
    update user
    set user_code = #{userCode,jdbcType=INTEGER},
      user_name = #{userName,jdbcType=VARCHAR},
      department_id = #{departmentId,jdbcType=INTEGER},
      pass_word = #{passWord,jdbcType=VARCHAR},
      user_level = #{userLevel,jdbcType=VARCHAR}
    where id = #{id,jdbcType=INTEGER}
  </update>
  <select id="selectNumByLogin" parameterType="com.example.dto.userinfo.LoginMessageDTO" resultType="int">
    SELECT count(*) FROM `user` u JOIN department d ON u.department_id = d.id
    where  u.user_name LIKE '${userName}' AND d.department_name LIKE '${departmentName}'
  </select>
  <select id="selectPasswordByName" resultType="String">
    select pass_word FROM `user` WHERE user_name like '${name}'
  </select>
  <select id="selectUserByName" resultMap="BaseResultMap">
    select * FROM `user` WHERE user_name like '${name}'
  </select>
  <select id="selectAllNameByDepament" resultType="String">
    SELECT user_name from `user` u join department d on u.department_id = d.id
    <where>
      <if test="departmentName != '' and departmentName != null">
        and d.department_name like '${departmentName}'
      </if>
      <if test="department != '' and department != null">
        and department_id = #{department}
      </if>
    </where>
  </select>
  <select id="selectAllName" resultType="String">
    SELECT user_name from `user`
  </select>
  <select id="selectNameById" resultType="String">
    SELECT user_name FROM `user` WHERE id = #{id}
  </select>
  <select id="selectLevelByName" resultType="String">
    SELECT user_level FROM `user` WHERE user_name like #{userName}
  </select>
</mapper>