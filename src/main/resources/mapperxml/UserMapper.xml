<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.mapper.UserMapper">
  <resultMap id="BaseResultMap" type="com.example.entity.User">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="uid" jdbcType="INTEGER" property="uid" />
    <result column="userName" jdbcType="VARCHAR" property="userName" />
    <result column="department" jdbcType="INTEGER" property="department" />
    <result column="passWord" jdbcType="VARCHAR" property="passWord" />
  </resultMap>
  <sql id="Base_Column_List">
    id, uid, userName, department, passWord
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from user
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from user
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.example.entity.User">
    insert into user (id, uid, userName, 
      department, passWord)
    values (#{id,jdbcType=INTEGER}, #{uid,jdbcType=INTEGER}, #{userName,jdbcType=VARCHAR}, 
      #{department,jdbcType=INTEGER}, #{passWord,jdbcType=VARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="com.example.entity.User">
    insert into user
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="uid != null">
        uid,
      </if>
      <if test="userName != null">
        userName,
      </if>
      <if test="department != null">
        department,
      </if>
      <if test="passWord != null">
        passWord,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=INTEGER},
      </if>
      <if test="uid != null">
        #{uid,jdbcType=INTEGER},
      </if>
      <if test="userName != null">
        #{userName,jdbcType=VARCHAR},
      </if>
      <if test="department != null">
        #{department,jdbcType=INTEGER},
      </if>
      <if test="passWord != null">
        #{passWord,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.example.entity.User">
    update user
    <set>
      <if test="uid != null">
        uid = #{uid,jdbcType=INTEGER},
      </if>
      <if test="userName != null">
        userName = #{userName,jdbcType=VARCHAR},
      </if>
      <if test="department != null">
        department = #{department,jdbcType=INTEGER},
      </if>
      <if test="passWord != null">
        passWord = #{passWord,jdbcType=VARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.example.entity.User">
    update user
    set uid = #{uid,jdbcType=INTEGER},
      userName = #{userName,jdbcType=VARCHAR},
      department = #{department,jdbcType=INTEGER},
      passWord = #{passWord,jdbcType=VARCHAR}
    where id = #{id,jdbcType=INTEGER}
  </update>
  <select id="selectNumByLogin" parameterType="com.example.dto.LoginMessageDTO" resultType="int">
    SELECT count(*) FROM `user` u join department d on u.department = d.id and `username` like '${userName}' and d.dName like '${department}'
  </select>
  <select id="selectPasswordByName" resultType="String">
    select `password` FROM `user` WHERE `username` like '${name}'
  </select>
  <select id="selectUserByName" resultMap="BaseResultMap">
    select * FROM `user` WHERE `username` like '${name}'
  </select>
  <select id="selectAllNameByDepament" resultType="String">
    SELECT userName from `user` where department = #{department}
  </select>
  <select id="selectAllName" resultType="String">
    SELECT userName from `user`
  </select>
</mapper>